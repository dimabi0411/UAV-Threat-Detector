
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Threat
 * 
 */
export type Threat = $Result.DefaultSelection<Prisma.$ThreatPayload>
/**
 * Model Plane
 * 
 */
export type Plane = $Result.DefaultSelection<Prisma.$PlanePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Threats
 * const threats = await prisma.threat.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Threats
   * const threats = await prisma.threat.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.threat`: Exposes CRUD operations for the **Threat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Threats
    * const threats = await prisma.threat.findMany()
    * ```
    */
  get threat(): Prisma.ThreatDelegate<ExtArgs>;

  /**
   * `prisma.plane`: Exposes CRUD operations for the **Plane** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Planes
    * const planes = await prisma.plane.findMany()
    * ```
    */
  get plane(): Prisma.PlaneDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.11.0
   * Query Engine version: efd2449663b3d73d637ea1fd226bafbcf45b3102
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Threat: 'Threat',
    Plane: 'Plane'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'threat' | 'plane'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Threat: {
        payload: Prisma.$ThreatPayload<ExtArgs>
        fields: Prisma.ThreatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThreatFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThreatFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreatPayload>
          }
          findFirst: {
            args: Prisma.ThreatFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThreatFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreatPayload>
          }
          findMany: {
            args: Prisma.ThreatFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreatPayload>[]
          }
          create: {
            args: Prisma.ThreatCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreatPayload>
          }
          createMany: {
            args: Prisma.ThreatCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ThreatDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreatPayload>
          }
          update: {
            args: Prisma.ThreatUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreatPayload>
          }
          deleteMany: {
            args: Prisma.ThreatDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ThreatUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ThreatUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreatPayload>
          }
          aggregate: {
            args: Prisma.ThreatAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateThreat>
          }
          groupBy: {
            args: Prisma.ThreatGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ThreatGroupByOutputType>[]
          }
          count: {
            args: Prisma.ThreatCountArgs<ExtArgs>,
            result: $Utils.Optional<ThreatCountAggregateOutputType> | number
          }
        }
      }
      Plane: {
        payload: Prisma.$PlanePayload<ExtArgs>
        fields: Prisma.PlaneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlaneFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlaneFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanePayload>
          }
          findFirst: {
            args: Prisma.PlaneFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlaneFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanePayload>
          }
          findMany: {
            args: Prisma.PlaneFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanePayload>[]
          }
          create: {
            args: Prisma.PlaneCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanePayload>
          }
          createMany: {
            args: Prisma.PlaneCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PlaneDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanePayload>
          }
          update: {
            args: Prisma.PlaneUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanePayload>
          }
          deleteMany: {
            args: Prisma.PlaneDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PlaneUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PlaneUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanePayload>
          }
          aggregate: {
            args: Prisma.PlaneAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlane>
          }
          groupBy: {
            args: Prisma.PlaneGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlaneGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlaneCountArgs<ExtArgs>,
            result: $Utils.Optional<PlaneCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ThreatCountOutputType
   */

  export type ThreatCountOutputType = {
    planes: number
  }

  export type ThreatCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    planes?: boolean | ThreatCountOutputTypeCountPlanesArgs
  }

  // Custom InputTypes

  /**
   * ThreatCountOutputType without action
   */
  export type ThreatCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThreatCountOutputType
     */
    select?: ThreatCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ThreatCountOutputType without action
   */
  export type ThreatCountOutputTypeCountPlanesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaneWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Threat
   */

  export type AggregateThreat = {
    _count: ThreatCountAggregateOutputType | null
    _avg: ThreatAvgAggregateOutputType | null
    _sum: ThreatSumAggregateOutputType | null
    _min: ThreatMinAggregateOutputType | null
    _max: ThreatMaxAggregateOutputType | null
  }

  export type ThreatAvgAggregateOutputType = {
    id: number | null
    radius: number | null
    speed: number | null
  }

  export type ThreatSumAggregateOutputType = {
    id: number | null
    radius: number | null
    speed: number | null
  }

  export type ThreatMinAggregateOutputType = {
    id: number | null
    location: string | null
    radius: number | null
    speed: number | null
  }

  export type ThreatMaxAggregateOutputType = {
    id: number | null
    location: string | null
    radius: number | null
    speed: number | null
  }

  export type ThreatCountAggregateOutputType = {
    id: number
    location: number
    radius: number
    speed: number
    _all: number
  }


  export type ThreatAvgAggregateInputType = {
    id?: true
    radius?: true
    speed?: true
  }

  export type ThreatSumAggregateInputType = {
    id?: true
    radius?: true
    speed?: true
  }

  export type ThreatMinAggregateInputType = {
    id?: true
    location?: true
    radius?: true
    speed?: true
  }

  export type ThreatMaxAggregateInputType = {
    id?: true
    location?: true
    radius?: true
    speed?: true
  }

  export type ThreatCountAggregateInputType = {
    id?: true
    location?: true
    radius?: true
    speed?: true
    _all?: true
  }

  export type ThreatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Threat to aggregate.
     */
    where?: ThreatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threats to fetch.
     */
    orderBy?: ThreatOrderByWithRelationInput | ThreatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThreatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Threats
    **/
    _count?: true | ThreatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThreatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThreatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThreatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThreatMaxAggregateInputType
  }

  export type GetThreatAggregateType<T extends ThreatAggregateArgs> = {
        [P in keyof T & keyof AggregateThreat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThreat[P]>
      : GetScalarType<T[P], AggregateThreat[P]>
  }




  export type ThreatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThreatWhereInput
    orderBy?: ThreatOrderByWithAggregationInput | ThreatOrderByWithAggregationInput[]
    by: ThreatScalarFieldEnum[] | ThreatScalarFieldEnum
    having?: ThreatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThreatCountAggregateInputType | true
    _avg?: ThreatAvgAggregateInputType
    _sum?: ThreatSumAggregateInputType
    _min?: ThreatMinAggregateInputType
    _max?: ThreatMaxAggregateInputType
  }

  export type ThreatGroupByOutputType = {
    id: number
    location: string
    radius: number
    speed: number
    _count: ThreatCountAggregateOutputType | null
    _avg: ThreatAvgAggregateOutputType | null
    _sum: ThreatSumAggregateOutputType | null
    _min: ThreatMinAggregateOutputType | null
    _max: ThreatMaxAggregateOutputType | null
  }

  type GetThreatGroupByPayload<T extends ThreatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThreatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThreatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThreatGroupByOutputType[P]>
            : GetScalarType<T[P], ThreatGroupByOutputType[P]>
        }
      >
    >


  export type ThreatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    location?: boolean
    radius?: boolean
    speed?: boolean
    planes?: boolean | Threat$planesArgs<ExtArgs>
    _count?: boolean | ThreatCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["threat"]>

  export type ThreatSelectScalar = {
    id?: boolean
    location?: boolean
    radius?: boolean
    speed?: boolean
  }

  export type ThreatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    planes?: boolean | Threat$planesArgs<ExtArgs>
    _count?: boolean | ThreatCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ThreatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Threat"
    objects: {
      planes: Prisma.$PlanePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      location: string
      radius: number
      speed: number
    }, ExtArgs["result"]["threat"]>
    composites: {}
  }


  type ThreatGetPayload<S extends boolean | null | undefined | ThreatDefaultArgs> = $Result.GetResult<Prisma.$ThreatPayload, S>

  type ThreatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ThreatFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ThreatCountAggregateInputType | true
    }

  export interface ThreatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Threat'], meta: { name: 'Threat' } }
    /**
     * Find zero or one Threat that matches the filter.
     * @param {ThreatFindUniqueArgs} args - Arguments to find a Threat
     * @example
     * // Get one Threat
     * const threat = await prisma.threat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ThreatFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ThreatFindUniqueArgs<ExtArgs>>
    ): Prisma__ThreatClient<$Result.GetResult<Prisma.$ThreatPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Threat that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ThreatFindUniqueOrThrowArgs} args - Arguments to find a Threat
     * @example
     * // Get one Threat
     * const threat = await prisma.threat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ThreatFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ThreatFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ThreatClient<$Result.GetResult<Prisma.$ThreatPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Threat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreatFindFirstArgs} args - Arguments to find a Threat
     * @example
     * // Get one Threat
     * const threat = await prisma.threat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ThreatFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ThreatFindFirstArgs<ExtArgs>>
    ): Prisma__ThreatClient<$Result.GetResult<Prisma.$ThreatPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Threat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreatFindFirstOrThrowArgs} args - Arguments to find a Threat
     * @example
     * // Get one Threat
     * const threat = await prisma.threat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ThreatFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ThreatFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ThreatClient<$Result.GetResult<Prisma.$ThreatPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Threats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Threats
     * const threats = await prisma.threat.findMany()
     * 
     * // Get first 10 Threats
     * const threats = await prisma.threat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const threatWithIdOnly = await prisma.threat.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ThreatFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThreatFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThreatPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Threat.
     * @param {ThreatCreateArgs} args - Arguments to create a Threat.
     * @example
     * // Create one Threat
     * const Threat = await prisma.threat.create({
     *   data: {
     *     // ... data to create a Threat
     *   }
     * })
     * 
    **/
    create<T extends ThreatCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ThreatCreateArgs<ExtArgs>>
    ): Prisma__ThreatClient<$Result.GetResult<Prisma.$ThreatPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Threats.
     *     @param {ThreatCreateManyArgs} args - Arguments to create many Threats.
     *     @example
     *     // Create many Threats
     *     const threat = await prisma.threat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ThreatCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThreatCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Threat.
     * @param {ThreatDeleteArgs} args - Arguments to delete one Threat.
     * @example
     * // Delete one Threat
     * const Threat = await prisma.threat.delete({
     *   where: {
     *     // ... filter to delete one Threat
     *   }
     * })
     * 
    **/
    delete<T extends ThreatDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ThreatDeleteArgs<ExtArgs>>
    ): Prisma__ThreatClient<$Result.GetResult<Prisma.$ThreatPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Threat.
     * @param {ThreatUpdateArgs} args - Arguments to update one Threat.
     * @example
     * // Update one Threat
     * const threat = await prisma.threat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ThreatUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ThreatUpdateArgs<ExtArgs>>
    ): Prisma__ThreatClient<$Result.GetResult<Prisma.$ThreatPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Threats.
     * @param {ThreatDeleteManyArgs} args - Arguments to filter Threats to delete.
     * @example
     * // Delete a few Threats
     * const { count } = await prisma.threat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ThreatDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThreatDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Threats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Threats
     * const threat = await prisma.threat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ThreatUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ThreatUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Threat.
     * @param {ThreatUpsertArgs} args - Arguments to update or create a Threat.
     * @example
     * // Update or create a Threat
     * const threat = await prisma.threat.upsert({
     *   create: {
     *     // ... data to create a Threat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Threat we want to update
     *   }
     * })
    **/
    upsert<T extends ThreatUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ThreatUpsertArgs<ExtArgs>>
    ): Prisma__ThreatClient<$Result.GetResult<Prisma.$ThreatPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Threats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreatCountArgs} args - Arguments to filter Threats to count.
     * @example
     * // Count the number of Threats
     * const count = await prisma.threat.count({
     *   where: {
     *     // ... the filter for the Threats we want to count
     *   }
     * })
    **/
    count<T extends ThreatCountArgs>(
      args?: Subset<T, ThreatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThreatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Threat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThreatAggregateArgs>(args: Subset<T, ThreatAggregateArgs>): Prisma.PrismaPromise<GetThreatAggregateType<T>>

    /**
     * Group by Threat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThreatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThreatGroupByArgs['orderBy'] }
        : { orderBy?: ThreatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThreatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThreatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Threat model
   */
  readonly fields: ThreatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Threat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThreatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    planes<T extends Threat$planesArgs<ExtArgs> = {}>(args?: Subset<T, Threat$planesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Threat model
   */ 
  interface ThreatFieldRefs {
    readonly id: FieldRef<"Threat", 'Int'>
    readonly location: FieldRef<"Threat", 'String'>
    readonly radius: FieldRef<"Threat", 'Float'>
    readonly speed: FieldRef<"Threat", 'Float'>
  }
    

  // Custom InputTypes

  /**
   * Threat findUnique
   */
  export type ThreatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude<ExtArgs> | null
    /**
     * Filter, which Threat to fetch.
     */
    where: ThreatWhereUniqueInput
  }


  /**
   * Threat findUniqueOrThrow
   */
  export type ThreatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude<ExtArgs> | null
    /**
     * Filter, which Threat to fetch.
     */
    where: ThreatWhereUniqueInput
  }


  /**
   * Threat findFirst
   */
  export type ThreatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude<ExtArgs> | null
    /**
     * Filter, which Threat to fetch.
     */
    where?: ThreatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threats to fetch.
     */
    orderBy?: ThreatOrderByWithRelationInput | ThreatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Threats.
     */
    cursor?: ThreatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Threats.
     */
    distinct?: ThreatScalarFieldEnum | ThreatScalarFieldEnum[]
  }


  /**
   * Threat findFirstOrThrow
   */
  export type ThreatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude<ExtArgs> | null
    /**
     * Filter, which Threat to fetch.
     */
    where?: ThreatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threats to fetch.
     */
    orderBy?: ThreatOrderByWithRelationInput | ThreatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Threats.
     */
    cursor?: ThreatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Threats.
     */
    distinct?: ThreatScalarFieldEnum | ThreatScalarFieldEnum[]
  }


  /**
   * Threat findMany
   */
  export type ThreatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude<ExtArgs> | null
    /**
     * Filter, which Threats to fetch.
     */
    where?: ThreatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threats to fetch.
     */
    orderBy?: ThreatOrderByWithRelationInput | ThreatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Threats.
     */
    cursor?: ThreatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threats.
     */
    skip?: number
    distinct?: ThreatScalarFieldEnum | ThreatScalarFieldEnum[]
  }


  /**
   * Threat create
   */
  export type ThreatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude<ExtArgs> | null
    /**
     * The data needed to create a Threat.
     */
    data: XOR<ThreatCreateInput, ThreatUncheckedCreateInput>
  }


  /**
   * Threat createMany
   */
  export type ThreatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Threats.
     */
    data: ThreatCreateManyInput | ThreatCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Threat update
   */
  export type ThreatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude<ExtArgs> | null
    /**
     * The data needed to update a Threat.
     */
    data: XOR<ThreatUpdateInput, ThreatUncheckedUpdateInput>
    /**
     * Choose, which Threat to update.
     */
    where: ThreatWhereUniqueInput
  }


  /**
   * Threat updateMany
   */
  export type ThreatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Threats.
     */
    data: XOR<ThreatUpdateManyMutationInput, ThreatUncheckedUpdateManyInput>
    /**
     * Filter which Threats to update
     */
    where?: ThreatWhereInput
  }


  /**
   * Threat upsert
   */
  export type ThreatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude<ExtArgs> | null
    /**
     * The filter to search for the Threat to update in case it exists.
     */
    where: ThreatWhereUniqueInput
    /**
     * In case the Threat found by the `where` argument doesn't exist, create a new Threat with this data.
     */
    create: XOR<ThreatCreateInput, ThreatUncheckedCreateInput>
    /**
     * In case the Threat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThreatUpdateInput, ThreatUncheckedUpdateInput>
  }


  /**
   * Threat delete
   */
  export type ThreatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude<ExtArgs> | null
    /**
     * Filter which Threat to delete.
     */
    where: ThreatWhereUniqueInput
  }


  /**
   * Threat deleteMany
   */
  export type ThreatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Threats to delete
     */
    where?: ThreatWhereInput
  }


  /**
   * Threat.planes
   */
  export type Threat$planesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plane
     */
    select?: PlaneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaneInclude<ExtArgs> | null
    where?: PlaneWhereInput
    orderBy?: PlaneOrderByWithRelationInput | PlaneOrderByWithRelationInput[]
    cursor?: PlaneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlaneScalarFieldEnum | PlaneScalarFieldEnum[]
  }


  /**
   * Threat without action
   */
  export type ThreatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threat
     */
    select?: ThreatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreatInclude<ExtArgs> | null
  }



  /**
   * Model Plane
   */

  export type AggregatePlane = {
    _count: PlaneCountAggregateOutputType | null
    _avg: PlaneAvgAggregateOutputType | null
    _sum: PlaneSumAggregateOutputType | null
    _min: PlaneMinAggregateOutputType | null
    _max: PlaneMaxAggregateOutputType | null
  }

  export type PlaneAvgAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
    altitude: number | null
    heading: number | null
    velocity: number | null
    threatId: number | null
  }

  export type PlaneSumAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
    altitude: number | null
    heading: number | null
    velocity: number | null
    threatId: number | null
  }

  export type PlaneMinAggregateOutputType = {
    id: number | null
    icao24: string | null
    callSign: string | null
    originCountry: string | null
    lastUpdated: Date | null
    latitude: number | null
    longitude: number | null
    altitude: number | null
    heading: number | null
    velocity: number | null
    onGround: boolean | null
    squawk: string | null
    threatId: number | null
  }

  export type PlaneMaxAggregateOutputType = {
    id: number | null
    icao24: string | null
    callSign: string | null
    originCountry: string | null
    lastUpdated: Date | null
    latitude: number | null
    longitude: number | null
    altitude: number | null
    heading: number | null
    velocity: number | null
    onGround: boolean | null
    squawk: string | null
    threatId: number | null
  }

  export type PlaneCountAggregateOutputType = {
    id: number
    icao24: number
    callSign: number
    originCountry: number
    lastUpdated: number
    latitude: number
    longitude: number
    altitude: number
    heading: number
    velocity: number
    onGround: number
    squawk: number
    threatId: number
    _all: number
  }


  export type PlaneAvgAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    altitude?: true
    heading?: true
    velocity?: true
    threatId?: true
  }

  export type PlaneSumAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    altitude?: true
    heading?: true
    velocity?: true
    threatId?: true
  }

  export type PlaneMinAggregateInputType = {
    id?: true
    icao24?: true
    callSign?: true
    originCountry?: true
    lastUpdated?: true
    latitude?: true
    longitude?: true
    altitude?: true
    heading?: true
    velocity?: true
    onGround?: true
    squawk?: true
    threatId?: true
  }

  export type PlaneMaxAggregateInputType = {
    id?: true
    icao24?: true
    callSign?: true
    originCountry?: true
    lastUpdated?: true
    latitude?: true
    longitude?: true
    altitude?: true
    heading?: true
    velocity?: true
    onGround?: true
    squawk?: true
    threatId?: true
  }

  export type PlaneCountAggregateInputType = {
    id?: true
    icao24?: true
    callSign?: true
    originCountry?: true
    lastUpdated?: true
    latitude?: true
    longitude?: true
    altitude?: true
    heading?: true
    velocity?: true
    onGround?: true
    squawk?: true
    threatId?: true
    _all?: true
  }

  export type PlaneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plane to aggregate.
     */
    where?: PlaneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Planes to fetch.
     */
    orderBy?: PlaneOrderByWithRelationInput | PlaneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlaneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Planes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Planes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Planes
    **/
    _count?: true | PlaneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlaneAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlaneSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlaneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlaneMaxAggregateInputType
  }

  export type GetPlaneAggregateType<T extends PlaneAggregateArgs> = {
        [P in keyof T & keyof AggregatePlane]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlane[P]>
      : GetScalarType<T[P], AggregatePlane[P]>
  }




  export type PlaneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaneWhereInput
    orderBy?: PlaneOrderByWithAggregationInput | PlaneOrderByWithAggregationInput[]
    by: PlaneScalarFieldEnum[] | PlaneScalarFieldEnum
    having?: PlaneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlaneCountAggregateInputType | true
    _avg?: PlaneAvgAggregateInputType
    _sum?: PlaneSumAggregateInputType
    _min?: PlaneMinAggregateInputType
    _max?: PlaneMaxAggregateInputType
  }

  export type PlaneGroupByOutputType = {
    id: number
    icao24: string
    callSign: string | null
    originCountry: string | null
    lastUpdated: Date
    latitude: number
    longitude: number
    altitude: number
    heading: number
    velocity: number
    onGround: boolean
    squawk: string | null
    threatId: number
    _count: PlaneCountAggregateOutputType | null
    _avg: PlaneAvgAggregateOutputType | null
    _sum: PlaneSumAggregateOutputType | null
    _min: PlaneMinAggregateOutputType | null
    _max: PlaneMaxAggregateOutputType | null
  }

  type GetPlaneGroupByPayload<T extends PlaneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlaneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlaneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlaneGroupByOutputType[P]>
            : GetScalarType<T[P], PlaneGroupByOutputType[P]>
        }
      >
    >


  export type PlaneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    icao24?: boolean
    callSign?: boolean
    originCountry?: boolean
    lastUpdated?: boolean
    latitude?: boolean
    longitude?: boolean
    altitude?: boolean
    heading?: boolean
    velocity?: boolean
    onGround?: boolean
    squawk?: boolean
    threatId?: boolean
    threat?: boolean | ThreatDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plane"]>

  export type PlaneSelectScalar = {
    id?: boolean
    icao24?: boolean
    callSign?: boolean
    originCountry?: boolean
    lastUpdated?: boolean
    latitude?: boolean
    longitude?: boolean
    altitude?: boolean
    heading?: boolean
    velocity?: boolean
    onGround?: boolean
    squawk?: boolean
    threatId?: boolean
  }

  export type PlaneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    threat?: boolean | ThreatDefaultArgs<ExtArgs>
  }


  export type $PlanePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Plane"
    objects: {
      threat: Prisma.$ThreatPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      icao24: string
      callSign: string | null
      originCountry: string | null
      lastUpdated: Date
      latitude: number
      longitude: number
      altitude: number
      heading: number
      velocity: number
      onGround: boolean
      squawk: string | null
      threatId: number
    }, ExtArgs["result"]["plane"]>
    composites: {}
  }


  type PlaneGetPayload<S extends boolean | null | undefined | PlaneDefaultArgs> = $Result.GetResult<Prisma.$PlanePayload, S>

  type PlaneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlaneFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlaneCountAggregateInputType | true
    }

  export interface PlaneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Plane'], meta: { name: 'Plane' } }
    /**
     * Find zero or one Plane that matches the filter.
     * @param {PlaneFindUniqueArgs} args - Arguments to find a Plane
     * @example
     * // Get one Plane
     * const plane = await prisma.plane.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlaneFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PlaneFindUniqueArgs<ExtArgs>>
    ): Prisma__PlaneClient<$Result.GetResult<Prisma.$PlanePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Plane that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PlaneFindUniqueOrThrowArgs} args - Arguments to find a Plane
     * @example
     * // Get one Plane
     * const plane = await prisma.plane.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlaneFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaneFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PlaneClient<$Result.GetResult<Prisma.$PlanePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Plane that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaneFindFirstArgs} args - Arguments to find a Plane
     * @example
     * // Get one Plane
     * const plane = await prisma.plane.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlaneFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaneFindFirstArgs<ExtArgs>>
    ): Prisma__PlaneClient<$Result.GetResult<Prisma.$PlanePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Plane that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaneFindFirstOrThrowArgs} args - Arguments to find a Plane
     * @example
     * // Get one Plane
     * const plane = await prisma.plane.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlaneFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaneFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PlaneClient<$Result.GetResult<Prisma.$PlanePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Planes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaneFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Planes
     * const planes = await prisma.plane.findMany()
     * 
     * // Get first 10 Planes
     * const planes = await prisma.plane.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const planeWithIdOnly = await prisma.plane.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlaneFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaneFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Plane.
     * @param {PlaneCreateArgs} args - Arguments to create a Plane.
     * @example
     * // Create one Plane
     * const Plane = await prisma.plane.create({
     *   data: {
     *     // ... data to create a Plane
     *   }
     * })
     * 
    **/
    create<T extends PlaneCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PlaneCreateArgs<ExtArgs>>
    ): Prisma__PlaneClient<$Result.GetResult<Prisma.$PlanePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Planes.
     *     @param {PlaneCreateManyArgs} args - Arguments to create many Planes.
     *     @example
     *     // Create many Planes
     *     const plane = await prisma.plane.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PlaneCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaneCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Plane.
     * @param {PlaneDeleteArgs} args - Arguments to delete one Plane.
     * @example
     * // Delete one Plane
     * const Plane = await prisma.plane.delete({
     *   where: {
     *     // ... filter to delete one Plane
     *   }
     * })
     * 
    **/
    delete<T extends PlaneDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PlaneDeleteArgs<ExtArgs>>
    ): Prisma__PlaneClient<$Result.GetResult<Prisma.$PlanePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Plane.
     * @param {PlaneUpdateArgs} args - Arguments to update one Plane.
     * @example
     * // Update one Plane
     * const plane = await prisma.plane.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlaneUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PlaneUpdateArgs<ExtArgs>>
    ): Prisma__PlaneClient<$Result.GetResult<Prisma.$PlanePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Planes.
     * @param {PlaneDeleteManyArgs} args - Arguments to filter Planes to delete.
     * @example
     * // Delete a few Planes
     * const { count } = await prisma.plane.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlaneDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaneDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Planes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Planes
     * const plane = await prisma.plane.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlaneUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PlaneUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Plane.
     * @param {PlaneUpsertArgs} args - Arguments to update or create a Plane.
     * @example
     * // Update or create a Plane
     * const plane = await prisma.plane.upsert({
     *   create: {
     *     // ... data to create a Plane
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plane we want to update
     *   }
     * })
    **/
    upsert<T extends PlaneUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PlaneUpsertArgs<ExtArgs>>
    ): Prisma__PlaneClient<$Result.GetResult<Prisma.$PlanePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Planes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaneCountArgs} args - Arguments to filter Planes to count.
     * @example
     * // Count the number of Planes
     * const count = await prisma.plane.count({
     *   where: {
     *     // ... the filter for the Planes we want to count
     *   }
     * })
    **/
    count<T extends PlaneCountArgs>(
      args?: Subset<T, PlaneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlaneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plane.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlaneAggregateArgs>(args: Subset<T, PlaneAggregateArgs>): Prisma.PrismaPromise<GetPlaneAggregateType<T>>

    /**
     * Group by Plane.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlaneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlaneGroupByArgs['orderBy'] }
        : { orderBy?: PlaneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlaneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Plane model
   */
  readonly fields: PlaneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Plane.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlaneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    threat<T extends ThreatDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ThreatDefaultArgs<ExtArgs>>): Prisma__ThreatClient<$Result.GetResult<Prisma.$ThreatPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Plane model
   */ 
  interface PlaneFieldRefs {
    readonly id: FieldRef<"Plane", 'Int'>
    readonly icao24: FieldRef<"Plane", 'String'>
    readonly callSign: FieldRef<"Plane", 'String'>
    readonly originCountry: FieldRef<"Plane", 'String'>
    readonly lastUpdated: FieldRef<"Plane", 'DateTime'>
    readonly latitude: FieldRef<"Plane", 'Float'>
    readonly longitude: FieldRef<"Plane", 'Float'>
    readonly altitude: FieldRef<"Plane", 'Float'>
    readonly heading: FieldRef<"Plane", 'Float'>
    readonly velocity: FieldRef<"Plane", 'Float'>
    readonly onGround: FieldRef<"Plane", 'Boolean'>
    readonly squawk: FieldRef<"Plane", 'String'>
    readonly threatId: FieldRef<"Plane", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Plane findUnique
   */
  export type PlaneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plane
     */
    select?: PlaneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaneInclude<ExtArgs> | null
    /**
     * Filter, which Plane to fetch.
     */
    where: PlaneWhereUniqueInput
  }


  /**
   * Plane findUniqueOrThrow
   */
  export type PlaneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plane
     */
    select?: PlaneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaneInclude<ExtArgs> | null
    /**
     * Filter, which Plane to fetch.
     */
    where: PlaneWhereUniqueInput
  }


  /**
   * Plane findFirst
   */
  export type PlaneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plane
     */
    select?: PlaneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaneInclude<ExtArgs> | null
    /**
     * Filter, which Plane to fetch.
     */
    where?: PlaneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Planes to fetch.
     */
    orderBy?: PlaneOrderByWithRelationInput | PlaneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Planes.
     */
    cursor?: PlaneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Planes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Planes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Planes.
     */
    distinct?: PlaneScalarFieldEnum | PlaneScalarFieldEnum[]
  }


  /**
   * Plane findFirstOrThrow
   */
  export type PlaneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plane
     */
    select?: PlaneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaneInclude<ExtArgs> | null
    /**
     * Filter, which Plane to fetch.
     */
    where?: PlaneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Planes to fetch.
     */
    orderBy?: PlaneOrderByWithRelationInput | PlaneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Planes.
     */
    cursor?: PlaneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Planes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Planes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Planes.
     */
    distinct?: PlaneScalarFieldEnum | PlaneScalarFieldEnum[]
  }


  /**
   * Plane findMany
   */
  export type PlaneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plane
     */
    select?: PlaneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaneInclude<ExtArgs> | null
    /**
     * Filter, which Planes to fetch.
     */
    where?: PlaneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Planes to fetch.
     */
    orderBy?: PlaneOrderByWithRelationInput | PlaneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Planes.
     */
    cursor?: PlaneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Planes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Planes.
     */
    skip?: number
    distinct?: PlaneScalarFieldEnum | PlaneScalarFieldEnum[]
  }


  /**
   * Plane create
   */
  export type PlaneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plane
     */
    select?: PlaneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaneInclude<ExtArgs> | null
    /**
     * The data needed to create a Plane.
     */
    data: XOR<PlaneCreateInput, PlaneUncheckedCreateInput>
  }


  /**
   * Plane createMany
   */
  export type PlaneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Planes.
     */
    data: PlaneCreateManyInput | PlaneCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Plane update
   */
  export type PlaneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plane
     */
    select?: PlaneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaneInclude<ExtArgs> | null
    /**
     * The data needed to update a Plane.
     */
    data: XOR<PlaneUpdateInput, PlaneUncheckedUpdateInput>
    /**
     * Choose, which Plane to update.
     */
    where: PlaneWhereUniqueInput
  }


  /**
   * Plane updateMany
   */
  export type PlaneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Planes.
     */
    data: XOR<PlaneUpdateManyMutationInput, PlaneUncheckedUpdateManyInput>
    /**
     * Filter which Planes to update
     */
    where?: PlaneWhereInput
  }


  /**
   * Plane upsert
   */
  export type PlaneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plane
     */
    select?: PlaneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaneInclude<ExtArgs> | null
    /**
     * The filter to search for the Plane to update in case it exists.
     */
    where: PlaneWhereUniqueInput
    /**
     * In case the Plane found by the `where` argument doesn't exist, create a new Plane with this data.
     */
    create: XOR<PlaneCreateInput, PlaneUncheckedCreateInput>
    /**
     * In case the Plane was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlaneUpdateInput, PlaneUncheckedUpdateInput>
  }


  /**
   * Plane delete
   */
  export type PlaneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plane
     */
    select?: PlaneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaneInclude<ExtArgs> | null
    /**
     * Filter which Plane to delete.
     */
    where: PlaneWhereUniqueInput
  }


  /**
   * Plane deleteMany
   */
  export type PlaneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Planes to delete
     */
    where?: PlaneWhereInput
  }


  /**
   * Plane without action
   */
  export type PlaneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plane
     */
    select?: PlaneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaneInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ThreatScalarFieldEnum: {
    id: 'id',
    location: 'location',
    radius: 'radius',
    speed: 'speed'
  };

  export type ThreatScalarFieldEnum = (typeof ThreatScalarFieldEnum)[keyof typeof ThreatScalarFieldEnum]


  export const PlaneScalarFieldEnum: {
    id: 'id',
    icao24: 'icao24',
    callSign: 'callSign',
    originCountry: 'originCountry',
    lastUpdated: 'lastUpdated',
    latitude: 'latitude',
    longitude: 'longitude',
    altitude: 'altitude',
    heading: 'heading',
    velocity: 'velocity',
    onGround: 'onGround',
    squawk: 'squawk',
    threatId: 'threatId'
  };

  export type PlaneScalarFieldEnum = (typeof PlaneScalarFieldEnum)[keyof typeof PlaneScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type ThreatWhereInput = {
    AND?: ThreatWhereInput | ThreatWhereInput[]
    OR?: ThreatWhereInput[]
    NOT?: ThreatWhereInput | ThreatWhereInput[]
    id?: IntFilter<"Threat"> | number
    location?: StringFilter<"Threat"> | string
    radius?: FloatFilter<"Threat"> | number
    speed?: FloatFilter<"Threat"> | number
    planes?: PlaneListRelationFilter
  }

  export type ThreatOrderByWithRelationInput = {
    id?: SortOrder
    location?: SortOrder
    radius?: SortOrder
    speed?: SortOrder
    planes?: PlaneOrderByRelationAggregateInput
  }

  export type ThreatWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ThreatWhereInput | ThreatWhereInput[]
    OR?: ThreatWhereInput[]
    NOT?: ThreatWhereInput | ThreatWhereInput[]
    location?: StringFilter<"Threat"> | string
    radius?: FloatFilter<"Threat"> | number
    speed?: FloatFilter<"Threat"> | number
    planes?: PlaneListRelationFilter
  }, "id">

  export type ThreatOrderByWithAggregationInput = {
    id?: SortOrder
    location?: SortOrder
    radius?: SortOrder
    speed?: SortOrder
    _count?: ThreatCountOrderByAggregateInput
    _avg?: ThreatAvgOrderByAggregateInput
    _max?: ThreatMaxOrderByAggregateInput
    _min?: ThreatMinOrderByAggregateInput
    _sum?: ThreatSumOrderByAggregateInput
  }

  export type ThreatScalarWhereWithAggregatesInput = {
    AND?: ThreatScalarWhereWithAggregatesInput | ThreatScalarWhereWithAggregatesInput[]
    OR?: ThreatScalarWhereWithAggregatesInput[]
    NOT?: ThreatScalarWhereWithAggregatesInput | ThreatScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Threat"> | number
    location?: StringWithAggregatesFilter<"Threat"> | string
    radius?: FloatWithAggregatesFilter<"Threat"> | number
    speed?: FloatWithAggregatesFilter<"Threat"> | number
  }

  export type PlaneWhereInput = {
    AND?: PlaneWhereInput | PlaneWhereInput[]
    OR?: PlaneWhereInput[]
    NOT?: PlaneWhereInput | PlaneWhereInput[]
    id?: IntFilter<"Plane"> | number
    icao24?: StringFilter<"Plane"> | string
    callSign?: StringNullableFilter<"Plane"> | string | null
    originCountry?: StringNullableFilter<"Plane"> | string | null
    lastUpdated?: DateTimeFilter<"Plane"> | Date | string
    latitude?: FloatFilter<"Plane"> | number
    longitude?: FloatFilter<"Plane"> | number
    altitude?: FloatFilter<"Plane"> | number
    heading?: FloatFilter<"Plane"> | number
    velocity?: FloatFilter<"Plane"> | number
    onGround?: BoolFilter<"Plane"> | boolean
    squawk?: StringNullableFilter<"Plane"> | string | null
    threatId?: IntFilter<"Plane"> | number
    threat?: XOR<ThreatRelationFilter, ThreatWhereInput>
  }

  export type PlaneOrderByWithRelationInput = {
    id?: SortOrder
    icao24?: SortOrder
    callSign?: SortOrderInput | SortOrder
    originCountry?: SortOrderInput | SortOrder
    lastUpdated?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    altitude?: SortOrder
    heading?: SortOrder
    velocity?: SortOrder
    onGround?: SortOrder
    squawk?: SortOrderInput | SortOrder
    threatId?: SortOrder
    threat?: ThreatOrderByWithRelationInput
  }

  export type PlaneWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PlaneWhereInput | PlaneWhereInput[]
    OR?: PlaneWhereInput[]
    NOT?: PlaneWhereInput | PlaneWhereInput[]
    icao24?: StringFilter<"Plane"> | string
    callSign?: StringNullableFilter<"Plane"> | string | null
    originCountry?: StringNullableFilter<"Plane"> | string | null
    lastUpdated?: DateTimeFilter<"Plane"> | Date | string
    latitude?: FloatFilter<"Plane"> | number
    longitude?: FloatFilter<"Plane"> | number
    altitude?: FloatFilter<"Plane"> | number
    heading?: FloatFilter<"Plane"> | number
    velocity?: FloatFilter<"Plane"> | number
    onGround?: BoolFilter<"Plane"> | boolean
    squawk?: StringNullableFilter<"Plane"> | string | null
    threatId?: IntFilter<"Plane"> | number
    threat?: XOR<ThreatRelationFilter, ThreatWhereInput>
  }, "id">

  export type PlaneOrderByWithAggregationInput = {
    id?: SortOrder
    icao24?: SortOrder
    callSign?: SortOrderInput | SortOrder
    originCountry?: SortOrderInput | SortOrder
    lastUpdated?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    altitude?: SortOrder
    heading?: SortOrder
    velocity?: SortOrder
    onGround?: SortOrder
    squawk?: SortOrderInput | SortOrder
    threatId?: SortOrder
    _count?: PlaneCountOrderByAggregateInput
    _avg?: PlaneAvgOrderByAggregateInput
    _max?: PlaneMaxOrderByAggregateInput
    _min?: PlaneMinOrderByAggregateInput
    _sum?: PlaneSumOrderByAggregateInput
  }

  export type PlaneScalarWhereWithAggregatesInput = {
    AND?: PlaneScalarWhereWithAggregatesInput | PlaneScalarWhereWithAggregatesInput[]
    OR?: PlaneScalarWhereWithAggregatesInput[]
    NOT?: PlaneScalarWhereWithAggregatesInput | PlaneScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Plane"> | number
    icao24?: StringWithAggregatesFilter<"Plane"> | string
    callSign?: StringNullableWithAggregatesFilter<"Plane"> | string | null
    originCountry?: StringNullableWithAggregatesFilter<"Plane"> | string | null
    lastUpdated?: DateTimeWithAggregatesFilter<"Plane"> | Date | string
    latitude?: FloatWithAggregatesFilter<"Plane"> | number
    longitude?: FloatWithAggregatesFilter<"Plane"> | number
    altitude?: FloatWithAggregatesFilter<"Plane"> | number
    heading?: FloatWithAggregatesFilter<"Plane"> | number
    velocity?: FloatWithAggregatesFilter<"Plane"> | number
    onGround?: BoolWithAggregatesFilter<"Plane"> | boolean
    squawk?: StringNullableWithAggregatesFilter<"Plane"> | string | null
    threatId?: IntWithAggregatesFilter<"Plane"> | number
  }

  export type ThreatCreateInput = {
    location: string
    radius: number
    speed: number
    planes?: PlaneCreateNestedManyWithoutThreatInput
  }

  export type ThreatUncheckedCreateInput = {
    id?: number
    location: string
    radius: number
    speed: number
    planes?: PlaneUncheckedCreateNestedManyWithoutThreatInput
  }

  export type ThreatUpdateInput = {
    location?: StringFieldUpdateOperationsInput | string
    radius?: FloatFieldUpdateOperationsInput | number
    speed?: FloatFieldUpdateOperationsInput | number
    planes?: PlaneUpdateManyWithoutThreatNestedInput
  }

  export type ThreatUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    radius?: FloatFieldUpdateOperationsInput | number
    speed?: FloatFieldUpdateOperationsInput | number
    planes?: PlaneUncheckedUpdateManyWithoutThreatNestedInput
  }

  export type ThreatCreateManyInput = {
    id?: number
    location: string
    radius: number
    speed: number
  }

  export type ThreatUpdateManyMutationInput = {
    location?: StringFieldUpdateOperationsInput | string
    radius?: FloatFieldUpdateOperationsInput | number
    speed?: FloatFieldUpdateOperationsInput | number
  }

  export type ThreatUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    radius?: FloatFieldUpdateOperationsInput | number
    speed?: FloatFieldUpdateOperationsInput | number
  }

  export type PlaneCreateInput = {
    icao24: string
    callSign?: string | null
    originCountry?: string | null
    lastUpdated: Date | string
    latitude: number
    longitude: number
    altitude: number
    heading: number
    velocity: number
    onGround: boolean
    squawk?: string | null
    threat: ThreatCreateNestedOneWithoutPlanesInput
  }

  export type PlaneUncheckedCreateInput = {
    id?: number
    icao24: string
    callSign?: string | null
    originCountry?: string | null
    lastUpdated: Date | string
    latitude: number
    longitude: number
    altitude: number
    heading: number
    velocity: number
    onGround: boolean
    squawk?: string | null
    threatId: number
  }

  export type PlaneUpdateInput = {
    icao24?: StringFieldUpdateOperationsInput | string
    callSign?: NullableStringFieldUpdateOperationsInput | string | null
    originCountry?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    altitude?: FloatFieldUpdateOperationsInput | number
    heading?: FloatFieldUpdateOperationsInput | number
    velocity?: FloatFieldUpdateOperationsInput | number
    onGround?: BoolFieldUpdateOperationsInput | boolean
    squawk?: NullableStringFieldUpdateOperationsInput | string | null
    threat?: ThreatUpdateOneRequiredWithoutPlanesNestedInput
  }

  export type PlaneUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    icao24?: StringFieldUpdateOperationsInput | string
    callSign?: NullableStringFieldUpdateOperationsInput | string | null
    originCountry?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    altitude?: FloatFieldUpdateOperationsInput | number
    heading?: FloatFieldUpdateOperationsInput | number
    velocity?: FloatFieldUpdateOperationsInput | number
    onGround?: BoolFieldUpdateOperationsInput | boolean
    squawk?: NullableStringFieldUpdateOperationsInput | string | null
    threatId?: IntFieldUpdateOperationsInput | number
  }

  export type PlaneCreateManyInput = {
    id?: number
    icao24: string
    callSign?: string | null
    originCountry?: string | null
    lastUpdated: Date | string
    latitude: number
    longitude: number
    altitude: number
    heading: number
    velocity: number
    onGround: boolean
    squawk?: string | null
    threatId: number
  }

  export type PlaneUpdateManyMutationInput = {
    icao24?: StringFieldUpdateOperationsInput | string
    callSign?: NullableStringFieldUpdateOperationsInput | string | null
    originCountry?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    altitude?: FloatFieldUpdateOperationsInput | number
    heading?: FloatFieldUpdateOperationsInput | number
    velocity?: FloatFieldUpdateOperationsInput | number
    onGround?: BoolFieldUpdateOperationsInput | boolean
    squawk?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlaneUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    icao24?: StringFieldUpdateOperationsInput | string
    callSign?: NullableStringFieldUpdateOperationsInput | string | null
    originCountry?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    altitude?: FloatFieldUpdateOperationsInput | number
    heading?: FloatFieldUpdateOperationsInput | number
    velocity?: FloatFieldUpdateOperationsInput | number
    onGround?: BoolFieldUpdateOperationsInput | boolean
    squawk?: NullableStringFieldUpdateOperationsInput | string | null
    threatId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PlaneListRelationFilter = {
    every?: PlaneWhereInput
    some?: PlaneWhereInput
    none?: PlaneWhereInput
  }

  export type PlaneOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ThreatCountOrderByAggregateInput = {
    id?: SortOrder
    location?: SortOrder
    radius?: SortOrder
    speed?: SortOrder
  }

  export type ThreatAvgOrderByAggregateInput = {
    id?: SortOrder
    radius?: SortOrder
    speed?: SortOrder
  }

  export type ThreatMaxOrderByAggregateInput = {
    id?: SortOrder
    location?: SortOrder
    radius?: SortOrder
    speed?: SortOrder
  }

  export type ThreatMinOrderByAggregateInput = {
    id?: SortOrder
    location?: SortOrder
    radius?: SortOrder
    speed?: SortOrder
  }

  export type ThreatSumOrderByAggregateInput = {
    id?: SortOrder
    radius?: SortOrder
    speed?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ThreatRelationFilter = {
    is?: ThreatWhereInput
    isNot?: ThreatWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PlaneCountOrderByAggregateInput = {
    id?: SortOrder
    icao24?: SortOrder
    callSign?: SortOrder
    originCountry?: SortOrder
    lastUpdated?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    altitude?: SortOrder
    heading?: SortOrder
    velocity?: SortOrder
    onGround?: SortOrder
    squawk?: SortOrder
    threatId?: SortOrder
  }

  export type PlaneAvgOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    altitude?: SortOrder
    heading?: SortOrder
    velocity?: SortOrder
    threatId?: SortOrder
  }

  export type PlaneMaxOrderByAggregateInput = {
    id?: SortOrder
    icao24?: SortOrder
    callSign?: SortOrder
    originCountry?: SortOrder
    lastUpdated?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    altitude?: SortOrder
    heading?: SortOrder
    velocity?: SortOrder
    onGround?: SortOrder
    squawk?: SortOrder
    threatId?: SortOrder
  }

  export type PlaneMinOrderByAggregateInput = {
    id?: SortOrder
    icao24?: SortOrder
    callSign?: SortOrder
    originCountry?: SortOrder
    lastUpdated?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    altitude?: SortOrder
    heading?: SortOrder
    velocity?: SortOrder
    onGround?: SortOrder
    squawk?: SortOrder
    threatId?: SortOrder
  }

  export type PlaneSumOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    altitude?: SortOrder
    heading?: SortOrder
    velocity?: SortOrder
    threatId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PlaneCreateNestedManyWithoutThreatInput = {
    create?: XOR<PlaneCreateWithoutThreatInput, PlaneUncheckedCreateWithoutThreatInput> | PlaneCreateWithoutThreatInput[] | PlaneUncheckedCreateWithoutThreatInput[]
    connectOrCreate?: PlaneCreateOrConnectWithoutThreatInput | PlaneCreateOrConnectWithoutThreatInput[]
    createMany?: PlaneCreateManyThreatInputEnvelope
    connect?: PlaneWhereUniqueInput | PlaneWhereUniqueInput[]
  }

  export type PlaneUncheckedCreateNestedManyWithoutThreatInput = {
    create?: XOR<PlaneCreateWithoutThreatInput, PlaneUncheckedCreateWithoutThreatInput> | PlaneCreateWithoutThreatInput[] | PlaneUncheckedCreateWithoutThreatInput[]
    connectOrCreate?: PlaneCreateOrConnectWithoutThreatInput | PlaneCreateOrConnectWithoutThreatInput[]
    createMany?: PlaneCreateManyThreatInputEnvelope
    connect?: PlaneWhereUniqueInput | PlaneWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PlaneUpdateManyWithoutThreatNestedInput = {
    create?: XOR<PlaneCreateWithoutThreatInput, PlaneUncheckedCreateWithoutThreatInput> | PlaneCreateWithoutThreatInput[] | PlaneUncheckedCreateWithoutThreatInput[]
    connectOrCreate?: PlaneCreateOrConnectWithoutThreatInput | PlaneCreateOrConnectWithoutThreatInput[]
    upsert?: PlaneUpsertWithWhereUniqueWithoutThreatInput | PlaneUpsertWithWhereUniqueWithoutThreatInput[]
    createMany?: PlaneCreateManyThreatInputEnvelope
    set?: PlaneWhereUniqueInput | PlaneWhereUniqueInput[]
    disconnect?: PlaneWhereUniqueInput | PlaneWhereUniqueInput[]
    delete?: PlaneWhereUniqueInput | PlaneWhereUniqueInput[]
    connect?: PlaneWhereUniqueInput | PlaneWhereUniqueInput[]
    update?: PlaneUpdateWithWhereUniqueWithoutThreatInput | PlaneUpdateWithWhereUniqueWithoutThreatInput[]
    updateMany?: PlaneUpdateManyWithWhereWithoutThreatInput | PlaneUpdateManyWithWhereWithoutThreatInput[]
    deleteMany?: PlaneScalarWhereInput | PlaneScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PlaneUncheckedUpdateManyWithoutThreatNestedInput = {
    create?: XOR<PlaneCreateWithoutThreatInput, PlaneUncheckedCreateWithoutThreatInput> | PlaneCreateWithoutThreatInput[] | PlaneUncheckedCreateWithoutThreatInput[]
    connectOrCreate?: PlaneCreateOrConnectWithoutThreatInput | PlaneCreateOrConnectWithoutThreatInput[]
    upsert?: PlaneUpsertWithWhereUniqueWithoutThreatInput | PlaneUpsertWithWhereUniqueWithoutThreatInput[]
    createMany?: PlaneCreateManyThreatInputEnvelope
    set?: PlaneWhereUniqueInput | PlaneWhereUniqueInput[]
    disconnect?: PlaneWhereUniqueInput | PlaneWhereUniqueInput[]
    delete?: PlaneWhereUniqueInput | PlaneWhereUniqueInput[]
    connect?: PlaneWhereUniqueInput | PlaneWhereUniqueInput[]
    update?: PlaneUpdateWithWhereUniqueWithoutThreatInput | PlaneUpdateWithWhereUniqueWithoutThreatInput[]
    updateMany?: PlaneUpdateManyWithWhereWithoutThreatInput | PlaneUpdateManyWithWhereWithoutThreatInput[]
    deleteMany?: PlaneScalarWhereInput | PlaneScalarWhereInput[]
  }

  export type ThreatCreateNestedOneWithoutPlanesInput = {
    create?: XOR<ThreatCreateWithoutPlanesInput, ThreatUncheckedCreateWithoutPlanesInput>
    connectOrCreate?: ThreatCreateOrConnectWithoutPlanesInput
    connect?: ThreatWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ThreatUpdateOneRequiredWithoutPlanesNestedInput = {
    create?: XOR<ThreatCreateWithoutPlanesInput, ThreatUncheckedCreateWithoutPlanesInput>
    connectOrCreate?: ThreatCreateOrConnectWithoutPlanesInput
    upsert?: ThreatUpsertWithoutPlanesInput
    connect?: ThreatWhereUniqueInput
    update?: XOR<XOR<ThreatUpdateToOneWithWhereWithoutPlanesInput, ThreatUpdateWithoutPlanesInput>, ThreatUncheckedUpdateWithoutPlanesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PlaneCreateWithoutThreatInput = {
    icao24: string
    callSign?: string | null
    originCountry?: string | null
    lastUpdated: Date | string
    latitude: number
    longitude: number
    altitude: number
    heading: number
    velocity: number
    onGround: boolean
    squawk?: string | null
  }

  export type PlaneUncheckedCreateWithoutThreatInput = {
    id?: number
    icao24: string
    callSign?: string | null
    originCountry?: string | null
    lastUpdated: Date | string
    latitude: number
    longitude: number
    altitude: number
    heading: number
    velocity: number
    onGround: boolean
    squawk?: string | null
  }

  export type PlaneCreateOrConnectWithoutThreatInput = {
    where: PlaneWhereUniqueInput
    create: XOR<PlaneCreateWithoutThreatInput, PlaneUncheckedCreateWithoutThreatInput>
  }

  export type PlaneCreateManyThreatInputEnvelope = {
    data: PlaneCreateManyThreatInput | PlaneCreateManyThreatInput[]
    skipDuplicates?: boolean
  }

  export type PlaneUpsertWithWhereUniqueWithoutThreatInput = {
    where: PlaneWhereUniqueInput
    update: XOR<PlaneUpdateWithoutThreatInput, PlaneUncheckedUpdateWithoutThreatInput>
    create: XOR<PlaneCreateWithoutThreatInput, PlaneUncheckedCreateWithoutThreatInput>
  }

  export type PlaneUpdateWithWhereUniqueWithoutThreatInput = {
    where: PlaneWhereUniqueInput
    data: XOR<PlaneUpdateWithoutThreatInput, PlaneUncheckedUpdateWithoutThreatInput>
  }

  export type PlaneUpdateManyWithWhereWithoutThreatInput = {
    where: PlaneScalarWhereInput
    data: XOR<PlaneUpdateManyMutationInput, PlaneUncheckedUpdateManyWithoutThreatInput>
  }

  export type PlaneScalarWhereInput = {
    AND?: PlaneScalarWhereInput | PlaneScalarWhereInput[]
    OR?: PlaneScalarWhereInput[]
    NOT?: PlaneScalarWhereInput | PlaneScalarWhereInput[]
    id?: IntFilter<"Plane"> | number
    icao24?: StringFilter<"Plane"> | string
    callSign?: StringNullableFilter<"Plane"> | string | null
    originCountry?: StringNullableFilter<"Plane"> | string | null
    lastUpdated?: DateTimeFilter<"Plane"> | Date | string
    latitude?: FloatFilter<"Plane"> | number
    longitude?: FloatFilter<"Plane"> | number
    altitude?: FloatFilter<"Plane"> | number
    heading?: FloatFilter<"Plane"> | number
    velocity?: FloatFilter<"Plane"> | number
    onGround?: BoolFilter<"Plane"> | boolean
    squawk?: StringNullableFilter<"Plane"> | string | null
    threatId?: IntFilter<"Plane"> | number
  }

  export type ThreatCreateWithoutPlanesInput = {
    location: string
    radius: number
    speed: number
  }

  export type ThreatUncheckedCreateWithoutPlanesInput = {
    id?: number
    location: string
    radius: number
    speed: number
  }

  export type ThreatCreateOrConnectWithoutPlanesInput = {
    where: ThreatWhereUniqueInput
    create: XOR<ThreatCreateWithoutPlanesInput, ThreatUncheckedCreateWithoutPlanesInput>
  }

  export type ThreatUpsertWithoutPlanesInput = {
    update: XOR<ThreatUpdateWithoutPlanesInput, ThreatUncheckedUpdateWithoutPlanesInput>
    create: XOR<ThreatCreateWithoutPlanesInput, ThreatUncheckedCreateWithoutPlanesInput>
    where?: ThreatWhereInput
  }

  export type ThreatUpdateToOneWithWhereWithoutPlanesInput = {
    where?: ThreatWhereInput
    data: XOR<ThreatUpdateWithoutPlanesInput, ThreatUncheckedUpdateWithoutPlanesInput>
  }

  export type ThreatUpdateWithoutPlanesInput = {
    location?: StringFieldUpdateOperationsInput | string
    radius?: FloatFieldUpdateOperationsInput | number
    speed?: FloatFieldUpdateOperationsInput | number
  }

  export type ThreatUncheckedUpdateWithoutPlanesInput = {
    id?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    radius?: FloatFieldUpdateOperationsInput | number
    speed?: FloatFieldUpdateOperationsInput | number
  }

  export type PlaneCreateManyThreatInput = {
    id?: number
    icao24: string
    callSign?: string | null
    originCountry?: string | null
    lastUpdated: Date | string
    latitude: number
    longitude: number
    altitude: number
    heading: number
    velocity: number
    onGround: boolean
    squawk?: string | null
  }

  export type PlaneUpdateWithoutThreatInput = {
    icao24?: StringFieldUpdateOperationsInput | string
    callSign?: NullableStringFieldUpdateOperationsInput | string | null
    originCountry?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    altitude?: FloatFieldUpdateOperationsInput | number
    heading?: FloatFieldUpdateOperationsInput | number
    velocity?: FloatFieldUpdateOperationsInput | number
    onGround?: BoolFieldUpdateOperationsInput | boolean
    squawk?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlaneUncheckedUpdateWithoutThreatInput = {
    id?: IntFieldUpdateOperationsInput | number
    icao24?: StringFieldUpdateOperationsInput | string
    callSign?: NullableStringFieldUpdateOperationsInput | string | null
    originCountry?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    altitude?: FloatFieldUpdateOperationsInput | number
    heading?: FloatFieldUpdateOperationsInput | number
    velocity?: FloatFieldUpdateOperationsInput | number
    onGround?: BoolFieldUpdateOperationsInput | boolean
    squawk?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlaneUncheckedUpdateManyWithoutThreatInput = {
    id?: IntFieldUpdateOperationsInput | number
    icao24?: StringFieldUpdateOperationsInput | string
    callSign?: NullableStringFieldUpdateOperationsInput | string | null
    originCountry?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    altitude?: FloatFieldUpdateOperationsInput | number
    heading?: FloatFieldUpdateOperationsInput | number
    velocity?: FloatFieldUpdateOperationsInput | number
    onGround?: BoolFieldUpdateOperationsInput | boolean
    squawk?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ThreatCountOutputTypeDefaultArgs instead
     */
    export type ThreatCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ThreatCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ThreatDefaultArgs instead
     */
    export type ThreatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ThreatDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlaneDefaultArgs instead
     */
    export type PlaneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlaneDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}